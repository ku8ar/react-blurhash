(()=>{"use strict";var r={403:(r,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var t=["0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","#","$","%","*","+",",","-",".",":",";","=","?","@","[","]","^","_","{","|","}","~"];e.decode83=function(r){for(var e=0,a=0;a<r.length;a++){var o=r[a];e=83*e+t.indexOf(o)}return e},e.encode83=function(r,e){for(var a="",o=1;o<=e;o++){var n=Math.floor(r)/Math.pow(83,e-o)%83;a+=t[Math.floor(n)]}return a}},55:(r,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0});var a=t(403),o=t(96),n=t(795),i=function(r){if(!r||r.length<6)throw new n.ValidationError("The blurhash string must be at least 6 characters");var e=a.decode83(r[0]),t=Math.floor(e/9)+1,o=e%9+1;if(r.length!==4+2*o*t)throw new n.ValidationError("blurhash length mismatch: length is "+r.length+" but it should be "+(4+2*o*t))};e.isBlurhashValid=function(r){try{i(r)}catch(r){return{result:!1,errorReason:r.message}}return{result:!0}};var s=function(r){var e=r>>16,t=r>>8&255,a=255&r;return[o.sRGBToLinear(e),o.sRGBToLinear(t),o.sRGBToLinear(a)]},h=function(r,e){var t=Math.floor(r/361),a=Math.floor(r/19)%19,n=r%19;return[o.signPow((t-9)/9,2)*e,o.signPow((a-9)/9,2)*e,o.signPow((n-9)/9,2)*e]};e.default=function(r,e,t,n){i(r),n|=1;for(var u=a.decode83(r[0]),c=Math.floor(u/9)+1,l=u%9+1,f=(a.decode83(r[1])+1)/166,d=new Array(l*c),v=0;v<d.length;v++)if(0===v){var M=a.decode83(r.substring(2,6));d[v]=s(M)}else M=a.decode83(r.substring(4+2*v,6+2*v)),d[v]=h(M,f*n);for(var p=4*e,g=new Uint8ClampedArray(p*t),w=0;w<t;w++)for(var m=0;m<e;m++){for(var y=0,b=0,_=0,P=0;P<c;P++)for(v=0;v<l;v++){var B=Math.cos(Math.PI*m*v/e)*Math.cos(Math.PI*w*P/t),x=d[v+P*l];y+=x[0]*B,b+=x[1]*B,_+=x[2]*B}var G=o.linearTosRGB(y),R=o.linearTosRGB(b),O=o.linearTosRGB(_);g[4*m+0+w*p]=G,g[4*m+1+w*p]=R,g[4*m+2+w*p]=O,g[4*m+3+w*p]=255}return g}},796:(r,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0});var a=t(403),o=t(96),n=t(795);e.default=function(r,e,t,i,s){if(i<1||i>9||s<1||s>9)throw new n.ValidationError("BlurHash must have between 1 and 9 components");if(e*t*4!==r.length)throw new n.ValidationError("Width and height must match the pixels array");for(var h=[],u=function(a){for(var n=function(n){var i=0==n&&0==a?1:2,s=function(r,e,t,a){for(var n=0,i=0,s=0,h=4*e,u=0;u<e;u++)for(var c=0;c<t;c++){var l=a(u,c);n+=l*o.sRGBToLinear(r[4*u+0+c*h]),i+=l*o.sRGBToLinear(r[4*u+1+c*h]),s+=l*o.sRGBToLinear(r[4*u+2+c*h])}var f=1/(e*t);return[n*f,i*f,s*f]}(r,e,t,(function(r,o){return i*Math.cos(Math.PI*n*r/e)*Math.cos(Math.PI*a*o/t)}));h.push(s)},s=0;s<i;s++)n(s)},c=0;c<s;c++)u(c);var l,f,d=h[0],v=h.slice(1),M="",p=i-1+9*(s-1);if(M+=a.encode83(p,1),v.length>0){var g=Math.max.apply(Math,v.map((function(r){return Math.max.apply(Math,r)}))),w=Math.floor(Math.max(0,Math.min(82,Math.floor(166*g-.5))));l=(w+1)/166,M+=a.encode83(w,1)}else l=1,M+=a.encode83(0,1);return M+=a.encode83((f=d,(o.linearTosRGB(f[0])<<16)+(o.linearTosRGB(f[1])<<8)+o.linearTosRGB(f[2])),4),v.forEach((function(r){M+=a.encode83(function(r,e){return 19*Math.floor(Math.max(0,Math.min(18,Math.floor(9*o.signPow(r[0]/e,.5)+9.5))))*19+19*Math.floor(Math.max(0,Math.min(18,Math.floor(9*o.signPow(r[1]/e,.5)+9.5))))+Math.floor(Math.max(0,Math.min(18,Math.floor(9*o.signPow(r[2]/e,.5)+9.5))))}(r,l),2)})),M}},795:function(r,e){var t,a=this&&this.__extends||(t=function(r,e){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(r,e){r.__proto__=e}||function(r,e){for(var t in e)e.hasOwnProperty(t)&&(r[t]=e[t])},t(r,e)},function(r,e){function a(){this.constructor=r}t(r,e),r.prototype=null===e?Object.create(e):(a.prototype=e.prototype,new a)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(r){function e(e){var t=r.call(this,e)||this;return t.name="ValidationError",t.message=e,t}return a(e,r),e}(Error);e.ValidationError=o},60:(r,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0});var a=t(55);e.decode=a.default,e.isBlurhashValid=a.isBlurhashValid;var o=t(796);e.encode=o.default,function(r){for(var t in r)e.hasOwnProperty(t)||(e[t]=r[t])}(t(795))},96:(r,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.sRGBToLinear=function(r){var e=r/255;return e<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4)},e.linearTosRGB=function(r){var e=Math.max(0,Math.min(1,r));return e<=.0031308?Math.round(12.92*e*255+.5):Math.round(255*(1.055*Math.pow(e,1/2.4)-.055)+.5)},e.sign=function(r){return r<0?-1:1},e.signPow=function(r,t){return e.sign(r)*Math.pow(Math.abs(r),t)}},702:(r,e,a)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=a(60),n={};self.onmessage=async({data:r})=>{let{hash:e,width:t,height:a,xCount:i,yCount:s,punch:h,id:u}=r;r.canvas&&(n[u]=new WeakRef(r.canvas));const c=n[u]?.deref();if(!c)return;c.width=t||c.width,c.height=a||c.height;const l=c.getContext("2d"),f=(0,o.decode)(e,i,s,h),d=l.createImageData(i,s);d.data.set(f);const v=await createImageBitmap(d,0,0,i,s);l.drawImage(v,0,0,c.width,c.height)},function(){var r="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0;if(r){var a=void 0!==t?t:e;if(a)if("function"!=typeof a){for(var o in a)if(Object.prototype.hasOwnProperty.call(a,o)){var n=void 0;try{n=a[o]}catch(r){continue}r.register(n,o,"/Users/kuba/repo/react-blurhash/src/BlurhashWorker.worker.js")}}else r.register(a,"module.exports","/Users/kuba/repo/react-blurhash/src/BlurhashWorker.worker.js")}}()}},e={},t=function t(a){var o=e[a];if(void 0!==o)return o.exports;var n=e[a]={exports:{}};return r[a].call(n.exports,n,n.exports,t),n.exports}(702)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,